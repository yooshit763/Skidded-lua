do
    local ui =  game:GetService("CoreGui"):FindFirstChild("Discord") 
    if ui then
        ui:Destroy()
    end
end
local DiscordLib = loadstring(game:HttpGet"https://raw.githubusercontent.com/dawid-scripts/UI-Libs/main/discord%20lib.txt")()

local Win1 = DiscordLib:Window("East Hub V1") 

local TabMain = Win1:Server("East Hub V1", "")

local Tab1 = TabMain:Channel("Farms") 
local Tab2 = TabMain:Channel("Eggs") 
local Tab3 = TabMain:Channel("Pets") 
local Tab4 = TabMain:Channel("Misc") 
local Tab5 = TabMain:Channel("Remotes") 
local Tab6 = TabMain:Channel("Credit") 

local GameLibrary = require(game:GetService("ReplicatedStorage"):WaitForChild("Framework"):WaitForChild("Library"))
local Network = GameLibrary.Network
local Run_Service = game:GetService("RunService")
local rs = Run_Service.RenderStepped
local CurrencyOrder = {"Halloween Candy", "Tech Coins", "Fantasy Coins", "Coins", "Diamonds",}

local IMightKillMyselfCauseOfThis = {
            --Misc
            ['VIP'] = {'VIP'};
            --Spawn
            ['Town'] = {'Town', 'Town FRONT'}; ['Forest'] = {'Forest', 'Forest FRONT'}; ['Beach'] = {'Beach', 'Beach FRONT'}; ['Mine'] = {'Mine', 'Mine FRONT'}; ['Winter'] = {'Winter', 'Winter FRONT'}; ['Glacier'] = {'Glacier', 'Glacier Lake'}; ['Desert'] = {'Desert', 'Desert FRONT'}; ['Volcano'] = {'Volcano', 'Volcano FRONT'};
            -- Fantasy init
            ['Enchanted Forest'] = {'Enchanted Forest', 'Enchanted Forest FRONT'}; ['Ancient'] = {'Ancient Island'}; ['Samurai'] = {'Samurai Island', 'Samurai Island FRONT'}; ['Candy'] = {'Candy Island'}; ['Haunted'] = {'Haunted Island', 'Haunted Island FRONT'}; ['Hell'] = {'Hell Island'}; ['Heaven'] = {'Heaven Island'};
            -- Tech
            ['Ice Tech'] = {'Ice Tech'}; ['Tech City'] = {'Tech City'; 'Tech City FRONT'}; ['Dark Tech'] = {'Dark Tech'; 'Dark Tech FRONT'}; ['Steampunk'] = {'Steampunk'; 'Steampunk FRONT'}, ['Alien Forest'] = {"Alien Forest"; "Alien Forest FRONT"}, ['Alien Lab'] = {"Alien Forest"; "Alien Lab FRONT"}, ['Glitch'] = {"Glitch"; "Glitch FRONT"}; ['Hacker Portal'] = {"Hacker Portal", "Hacker Portal FRONT"};
            -- Axolotl
            ['Axolotl Ocean'] = {'Axolotl Ocean', 'Axolotl Ocean FRONT'}; ['Axolotl Deep Ocean'] = {'Axolotl Deep Ocean', 'Axolotl Deep Ocean FRONT'}; ['Axolotl Cave'] = {'Axolotl Cave', 'Axolotl Cave FRONT'};
            -- Minecraft
            ['Pixel Forest'] = {'Pixel Forest', 'Pixel Forest FRONT'}; ['Pixel Kyoto'] = {'Pixel Kyoto', 'Pixel Kyoto FRONT'}; ['Pixel Alps'] = {'Pixel Alps', 'Pixel Alps FRONT'} ; ['Pixel Vault'] = {'Pixel Vault', 'Pixel Vault FRONT'};
    }

    local AreaListLoc = { --These match the IMightKillMyselfCuaseOfThis table
            'VIP';
            'Town'; 'Forest'; 'Beach'; 'Mine'; 'Winter'; 'Glacier'; 'Desert'; 'Volcano';
            'Enchanted Forest'; 'Ancient'; 'Samurai'; 'Candy'; 'Haunted'; 'Hell'; 'Heaven';
            'Ice Tech'; 'Tech City'; 'Dark Tech'; 'Steampunk'; 'Alien Lab'; 'Alien Forest'; 'Glitch'; "Hacker Portal";
            'Axolotl Ocean'; 'Axolotl Deep Ocean'; 'Axolotl Cave';
            'Pixel Forest'; 'Pixel Kyoto'; 'Pixel Alps'; 'Pixel Vault';
        
    }
    
    local Chests = {
        'All';
        -- Spawn
        "Magma Chest",
        -- Fantasy
        "Enchanted Chest", "Hell Chest", "Haunted Chest", "Angel Chest", "Grand Heaven Chest",
        -- Tech
        "Giant Tech Chest"; "Giant Steampunk Chest";
    }
    
local function SecondsToClock(seconds) 
        local days = math.floor(seconds / 86400)
        seconds = seconds - days * 86400
        local hours = math.floor(seconds / 3600 )
        seconds = seconds - hours * 3600
        local minutes = math.floor(seconds / 60) 
        seconds = seconds - minutes * 60

        return string.format("%d d, %d h, %d m, %d s.",days,hours,minutes,seconds)
      end

local AreaWorldTable = {}
for _, v in pairs(game:GetService("ReplicatedStorage").Game.Coins:GetChildren()) do
    for _, b in pairs(v:GetChildren()) do
        table.insert(AreaWorldTable, b.Name)
    end
    table.insert(AreaWorldTable, v.Name)
end

function AllChests()
    local returntable = {}
    local ListCoins = game.workspace['__THINGS']['__REMOTES']["get coins"]:InvokeServer({})[1]
    for i,v in pairs(ListCoins) do
        local shit = v
        shit["index"] = i
        for aa,bb in pairs(AreaWorldTable) do
            if string.find(v.n, bb) then
                local thing = string.gsub(v.n, bb.." ", "")
                if table.find(Chests, thing) then
                    shit.n = thing
                    table.insert(returntable, shit)
                end
            end
        end
    end
    return returntable
end

-------------------------------

workspace.__THINGS.__REMOTES.MAIN:FireServer("b", "buy egg")
workspace.__THINGS.__REMOTES.MAIN:FireServer("b", "join coin")
workspace.__THINGS.__REMOTES.MAIN:FireServer("a", "farm coin")
workspace.__THINGS.__REMOTES.MAIN:FireServer("a", "claim orbs")
workspace.__THINGS.__REMOTES.MAIN:FireServer("a", "change pet target")
workspace.__THINGS.__REMOTES.MAIN:FireServer("b", "get trade")
workspace.__THINGS.__REMOTES.MAIN:FireServer("b", "add trade pet")
workspace.__THINGS.__REMOTES.MAIN:FireServer("b", "remove trade pet")
workspace.__THINGS.__REMOTES.MAIN:FireServer("b", "convert to dark matter")
workspace.__THINGS.__REMOTES.MAIN:FireServer("b", "redeem dark matter pet")
workspace.__THINGS.__REMOTES.MAIN:FireServer("b", "redeem rank rewards")
workspace.__THINGS.__REMOTES.MAIN:FireServer("b", "redeem vip rewards")
workspace.__THINGS.__REMOTES.MAIN:FireServer("a", "toggle setting")
workspace.__THINGS.__REMOTES.MAIN:FireServer("a", "activate boost")
workspace.__THINGS.__REMOTES.MAIN:FireServer("b", "use golden machine")
workspace.__THINGS.__REMOTES.MAIN:FireServer("b", "use rainbow machine")
-------------------------------

function FarmCoin(CoinID, PetID)
    game.workspace['__THINGS']['__REMOTES']["join coin"]:InvokeServer({[1] = CoinID, [2] = {[1] = PetID}})
    game.workspace['__THINGS']['__REMOTES']["farm coin"]:FireServer({[1] = CoinID, [2] = PetID})
end



local Library = require(game:GetService("ReplicatedStorage").Framework.Library)
local IDToName = {}
local NameToID = {}
for i,v in pairs(Library.Directory.Pets ) do
    IDToName[i] = v.name
    NameToID[v.name] = i
end

function GetMyPets()
       local returntable = {}
       for i,v in pairs(GameLibrary.Save.Get().Pets) do
           if v.e then 
               table.insert(returntable, v.uid)
           end
       end
       return returntable
    end

function GetPets()
        local MyPets = {}
        for i,v in pairs(GameLibrary.Save.Get().Pets) do
            --if (not _G.AllowMythicals) or (_G.AllowMythicals and (PettoRarity[v.id] ~= 'Mythical' and PettoRarity[v.id] ~= 'Exclusive' and not string.find(IDToName[v.id]:lower(), "maskot"))) then
                local ThingyThingyTempTypeThing = (v.g and 'Gold') or (v.r and 'Rainbow') or (v.dm and 'Dark Matter') or 'Normal'
                local TempString = ThingyThingyTempTypeThing .. IDToName[v.id]
                if MyPets[TempString] then
                    table.insert(MyPets[TempString], v.uid)
                else
                    MyPets[TempString] = {}
                    table.insert(MyPets[TempString], v.uid)
                end
            --end
        end
        return MyPets
    end




function GetCoins(area, exclude)
    exclude = exclude or {}
    local Areas = (IMightKillMyselfCauseOfThis)
    local returntable = {}
    local ListCoins = game.workspace['__THINGS']['__REMOTES']["get coins"]:InvokeServer({})[1]
    for i,v in pairs(ListCoins) do
        if _G.mapafunc == 'All' or table.find(Areas[_G.mapafunc], v.a) and not table.find(exclude ,v.n) then
            local shit = v
            shit["index"] = i
            table.insert(returntable, shit)
         end
    end
    return returntable
end
--------------------------



function GetCoinTable(area, Type, exclude)
    exclude = exclude or {}
    local CoinTable = GetCoins(area, exclude)
    local function getKeysSortedByValue(tbl, sortFunction)
        local keys = {}
        for key in pairs(tbl) do
            table.insert(keys, key)
        end
        table.sort(
            keys,
            function(a, b)
                return sortFunction(tbl[a].h, tbl[b].h)
            end
        )
        return keys
    end
    local sortedKeys
    if Type == 'Highest' then
        sortedKeys = getKeysSortedByValue(CoinTable, function(a, b) return a > b end)
    elseif Type == 'Lowest' then
        sortedKeys = getKeysSortedByValue(CoinTable, function(a, b) return a < b end)
    end
    local newCoinTable = {}

    for i,v in pairs(sortedKeys) do
        table.insert(newCoinTable, CoinTable[v])
    end

    return newCoinTable
end

if _G.MyConnection then _G.MyConnection:Disconnect() end
    _G.MyConnection = game.Workspace.__THINGS.Orbs.ChildAdded:Connect(function(Orb)
        game.Workspace.__THINGS.__REMOTES["claim orbs"]:FireServer({{Orb.Name}})
    end)

----------------------------------------
----------------------------------------


local MethodList = {'Normal', 'Multi Target', 'Lowest Value', 'Highest Value V1', 'Highest Value V2', 'Nearest'}

Tab1:Dropdown("Select Farm Types", MethodList, function(methodfunc)
    if methodfunc then
        _G.methodfunc = methodfunc
    end
    print("Selected method: ", methodfunc)
end)

Tab1:Dropdown("Select Area Type", AreaListLoc, function(mapafunc)
    if mapafunc then
        _G.mapafunc = mapafunc
    end
    print("Selected area: ", mapafunc)
end)

Tab1:Toggle("Enable Selected Farm", false, function(farmingtogglefunc)
if farmingtogglefunc == true then
    _G.FarmingToggle = true
elseif farmingtogglefunc == false or destroygui then
    _G.FarmingToggle = false
end
    
        local CurrentFarmingPets = {}--skidded from https://v3rmillion.net/showthread.php?tid=1137512
        while _G.FarmingToggle do
            local pethingy = GetMyPets()
            local cointhiny = nil


            if _G.methodfunc == 'Normal' then
                local cointhiny = GetCoins(_G.mapafunc)
                for i = 1, #cointhiny do
                    if _G.FarmingToggle and game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(cointhiny[i].index) then
                        for _, bb in pairs(pethingy) do
                            coroutine.wrap(function()
                                FarmCoin(cointhiny[i].index, bb)
                            end)()
                        end
                        repeat task.wait(0.001) until not game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(cointhiny[i].index) or not _G.FarmingToggle or _G.methodfunc ~= 'Normal'
                    end
                end

 
            elseif _G.methodfunc == 'Chest' then
                for i,v in pairs(AllChests()) do
                    if (v.n == _G.itemtofarmfunc) or (_G.itemtofarmfunc == 'All') then
                        local starttick = tick()
                        for a, b in pairs(pethingy) do
                            coroutine.wrap(function()
                                FarmCoin(v.index, b)
                            end)()
                        end
                        repeat task.wait(0.001) until not game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(v.index) or #game:GetService("Workspace")["__THINGS"].Coins[v.index].Pets:GetChildren() == 0 or not _G.FarmingToggle or _G.methodfunc ~= 'Chest'
                        --warn(v.n .. " has been broken in", tick()-starttick)
                    end
                end

 

            elseif _G.methodfunc == 'Multi Target' then
                local cointhiny = GetCoins(_G.mapafunc)
                for i = 1, #cointhiny do
                    if not CurrentFarmingPets[pethingy[i%#pethingy+1]] or CurrentFarmingPets[pethingy[i%#pethingy+1]] == nil then
                        coroutine.wrap(function()
                            CurrentFarmingPets[pethingy[i%#pethingy+1]] = 'Farming'
                            FarmCoin(cointhiny[i].index, pethingy[i%#pethingy+1])
                            repeat task.wait(0.001) until not game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(cointhiny[i].index) or #game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(cointhiny[i].index).Pets:GetChildren() == 0 or not _G.FarmingToggle or _G.methodfunc ~= 'Multi Target'
                            CurrentFarmingPets[pethingy[i%#pethingy+1]] = nil
                        end)()
                    end
                end

            elseif _G.methodfunc == 'Lowest Value' then
                local cointhiny = GetCoinTable(_G.mapafunc, "Lowest")
                for i = 1, (#cointhiny >= #pethingy and #pethingy or #cointhiny) do
                    if not CurrentFarmingPets[pethingy[i%#pethingy+1]] or CurrentFarmingPets[pethingy[i%#pethingy+1]] == nil then
                        coroutine.wrap(function()
                            CurrentFarmingPets[pethingy[i%#pethingy+1]] = 'Farming'
                            FarmCoin(cointhiny[i].index, pethingy[i%#pethingy+1])
                            repeat task.wait(0.0001) until not game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(cointhiny[i].index) or #game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(cointhiny[i].index).Pets:GetChildren() == 0 or not _G.FarmingToggle or _G.methodfunc ~= 'Lowest Value (Multi)'
                            CurrentFarmingPets[pethingy[i%#pethingy+1]] = nil
                        end)()
                    end
                end



            elseif _G.methodfunc == 'Highest Value V1' then
                local cointhiny = GetCoinTable(_G.mapafunc, "Highest")
                if #cointhiny >= 1 then
                    for a,b in pairs(pethingy) do
                        coroutine.wrap(function()
                            FarmCoin(cointhiny[1].index, b) 
                        end)()
                    end
                    repeat task.wait(0.001) until not game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(cointhiny[1].index) or #game:GetService("Workspace")["__THINGS"].Coins[cointhiny[1].index].Pets:GetChildren() == 0 or not _G.FarmingToggle or _G.methodfunc ~= 'Highest Value'
                else
                    task.wait()
                end

            elseif _G.methodfunc == 'Highest Value V2' then
                local cointhiny = GetCoinTable(_G.mapafunc, "Highest")
                if #cointhiny >= 3 then
                    local CurrentFarmingPets = {}
                    for a = 1, 3 do
                        coroutine.wrap(function()
                            if CurrentFarmingPets[a] == nil then
                                for petnum = a, #pethingy, 3 do
                                    coroutine.wrap(function()
                                        if not CurrentFarmingPets[a] then CurrentFarmingPets[a] = {} end
                                        if CurrentFarmingPets[a] ~= nil and game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(cointhiny[a].index) and not table.find(CurrentFarmingPets[a], pethingy[petnum]) then
                                            table.insert(CurrentFarmingPets[a], pethingy[petnum])
                                            FarmCoin(cointhiny[a].index, pethingy[petnum]) 
                                        end
                                    end)()
                                end
                                repeat task.wait(0.001) until not game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(cointhiny[a].index) or #game:GetService("Workspace")["__THINGS"].Coins[cointhiny[a].index].Pets:GetChildren() == 0  or not _G.FarmingToggle or _G.methodfunc ~= '[TESTING] Highest Value'
                                CurrentFarmingPets[a] = nil
                            end
                        end)()
                    end
                else
                    task.wait()
                end
            
            
            elseif _G.methodfunc == 'Nearest' then
                local cointable = game:GetService("Workspace")["__THINGS"].Coins:GetChildren()
                table.sort(cointable, function(i, v)
                    return (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - i.POS.Position).magnitude < (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - v.POS.Position).magnitude
                end)
                local NearestOne = cointable[1]
                if NearestOne ~= nil then
                    for a,b in pairs(pethingy) do
                        coroutine.wrap(function()
                            if NearestOne ~= nil then
                                FarmCoin(NearestOne.Name, b)
                            end
                        end)()
                    end
                    repeat task.wait(0.001) until not game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(NearestOne.Name) or #game:GetService("Workspace")["__THINGS"].Coins[NearestOne.Name].Pets:GetChildren() == 0
                else
                    task.wait()
                end
            end
        end
end)

local pathToScript = game.Players.LocalPlayer.PlayerScripts.Scripts.Game['Open Eggs']
local oldFunc = getsenv(pathToScript).OpenEgg
----
local Eggs = {} 
for i,v in pairs(game.ReplicatedStorage.Game.Eggs:GetChildren()) do 
    for i2,v2 in pairs(v:GetChildren()) do 
        table.insert(Eggs, v2.Name)
    end 
end

Tab2:Dropdown("Select Eggs Type", Eggs, function(eggor)
    if eggor then
        _G.Egg = eggor
    end
end)

Tab2:Toggle("Remove Egg Animation", false, function(delanimation)
    if delanimation == true then 
        getsenv(pathToScript).OpenEgg = function() return end 
    else
        getsenv(pathToScript).OpenEgg = oldFunc
    end 
end)

Tab2:Toggle("Use Triple Eggs | Gamepass", false, function(triplegamepass)

if triplegamepass == true then
    _G.TripleEgg = true
elseif triplegamepass == false or destroygui then
    _G.TripleEgg = false
    end
end)

_G.TripleEgg = false

Tab2:Toggle("Buy Egg", false, function(dropegg)
shared.toggle3drop = dropegg
end)
local openeegg = eggor
game:GetService("RunService").RenderStepped:connect(function()
if shared.toggle3drop then
    local ohTable1 = {
    	[1] = _G.Egg,
    	[2] = _G.TripleEgg
    }
    workspace.__THINGS.__REMOTES["buy egg"]:InvokeServer(ohTable1)
    wait(0.5)
    end
end) 

Tab3:Dropdown("Select Number Type", {1,2,3,4,5,6}, function(countcombinefunc)
    if countcombinefunc then
        _G.CountCombineFunc1 = countcombinefunc
    end
    --print("Selected Combine Count: ", _G.CountCombineFunc1)
end)

Tab3:Toggle("Auto Golden", false, function(togglegoldfunc)
if togglegoldfunc == true then
    _G.ToggleGold = true
elseif togglegoldfunc == false then
    _G.ToggleGold = false
end
end)


Tab3:Toggle("Auto Rainbow", false, function(toggleraibowfunc)
    if toggleraibowfunc == true then
    _G.ToggleRainbow = true
elseif toggleraibowfunc == false then
    _G.ToggleRainbow = false
end
end)


Tab3:Toggle("Start Toggle", false, function(autocombinefunc)
    
if autocombinefunc == true then
    _G.AutoCom = true
elseif autocombinefunc == false then
    _G.AutoCom = false
end

while wait() and _G.AutoCom do
    for i, v in pairs(GetPets()) do
        if #v >= _G.CountCombineFunc1 and _G.AutoCom then
            if string.find(i, "Normal") and _G.AutoCom and _G.ToggleGold then
                local Args = {}
                for eeeee = 1, _G.CountCombineFunc1 do
                    Args[#Args+1] = v[#Args+1]
                end
                Library.Network.Invoke("use golden machine", Args)

            elseif string.find(i, "Gold") and _G.AutoCom and _G.ToggleRainbow then
                local Args = {}
                for eeeee = 1, _G.CountCombineFunc1 do
                    Args[#Args+1] = v[#Args+1]
                end
                Library.Network.Invoke("use rainbow machine", Args)
            end
        end
    end
end

local Library = require(game:GetService("ReplicatedStorage").Framework.Library)
local IDToName = {}
local NameToID = {}
for i,v in pairs(Library.Directory.Pets ) do
    IDToName[i] = v.name
    NameToID[v.name] = i
end

function GetPets()
    local MyPets = {}
    for i,v in pairs(Library.Save.Get().Pets) do
        local ThingyThingyTempTypeThing = (v.g and 'Gold') or (v.r and 'Rainbow') or (v.dm and 'Dark Matter') or 'Normal'
        local TempString = ThingyThingyTempTypeThing .. IDToName[v.id]
        if MyPets[TempString] then
            table.insert(MyPets[TempString], v.uid)
        else
            MyPets[TempString] = {}
            table.insert(MyPets[TempString], v.uid)
        end
    end
    return MyPets
end
end)

Tab3:Label("|| Enchant ||")
local EnchantsList = {
    'Magnet',
    'Royalty',
    'Glittering',
    'Rainbow Coins',
    'Tech Coins',
    'Fantasy Coins',
    'Coins',
    'Teamwork',
    'Diamonds',
    'Strength',
    'Chests',
    'Presents',
    'Agility',
    'Charm'
}

Tab3:Dropdown("Select Enchant Type", EnchantsList, function(selectenchantfunc)
    if selectenchantfunc then
        _G.SelEnchant1 = selectenchantfunc
    end
    print("Selected Enchant: ", _G.SelEnchant1)
end)

local EnchantLevel = {1, 2, 3, 4, 5}
Tab3:Dropdown("Select Number Type", EnchantLevel, function(selectnumlevel)
    if selectnumlevel then
        _G.SelLevel1 = selectnumlevel
    end
    print("Selected Level: ", _G.SelLevel1)
end)

Tab3:Button("Start Enchant Equiped", function()

_G.SelEnchant1 = 'Tech Coins'
_G.SelLevel1 = 5
_G.EMERGENCYSTOP = false

local Wanted = {
[_G.SelEnchant1] = _G.SelLevel1 or 1;
}

local PettoRarity = {}
local a = require(game:GetService("ReplicatedStorage").Framework.Modules["1 | Directory"].Pets["Grab All Pets"])
for i, v in pairs(a) do
PettoRarity[i] = v.rarity
end

function GetPetTable(PetUID)
local Library = require(game:GetService("ReplicatedStorage").Framework.Library)
for i, v in pairs(Library.Save.Get().Pets) do
    if v.uid == PetUID then
        return v
    end
end
end
workspace.__THINGS.__REMOTES.MAIN:FireServer("b", "enchant pet")
wait(0.5)
local Library = require(game:GetService("ReplicatedStorage").Framework.Library)
for i, v in pairs(Library.Save.Get().Pets) do
if v.e and PettoRarity[v.id] ~= 'Mythical' and not _G.EMERGENCYSTOP then
    local haspower = false
    repeat wait()
        if GetPetTable(v.uid).powers then
            for a, b in pairs(GetPetTable(v.uid).powers) do
                warn(b[1], b[2])
                print(Wanted[b[1]])
                if Wanted[b[1]] ~= nil and not haspower and not _G.EMERGENCYSTOP then
                    if Wanted[b[1]] <= b[2] then
                        haspower = true
                        warn("Pet", v.uid, "has", b[1], b[2])
                    end
                end
            end
            if not haspower and not _G.EMERGENCYSTOP then
                print("Yea we kinda need new enchantments on", v.uid)

                workspace.__THINGS.__REMOTES["enchant pet"]:InvokeServer({[1] = v.uid})
                wait(0.1)
            end
        else
            warn("taking", v.uid,'\'s enchanting virginity lol')
            workspace.__THINGS.__REMOTES["enchant pet"]:InvokeServer({[1] = v.uid})
            wait(0.1)
        end
    until haspower == true or Library.Save.Get().Diamonds < 10000 or _G.EMERGENCYSTOP
end
end
end)

Tab3:Button("Stop Enchant", function(emergstop)
    if emergstop then
        _G.EMERGENCYSTOP = true
    end
    print("Emergency Enchant Stop")
end)

Tab4:Toggle("Auto Claim Gifts",false, function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/Brineeee/DarkHakX/main/ClaimGifts-CaughtSkid"))()
end) 

Tab4:Toggle("Auto Collect Orbs", function(bool)
    shared.toggle = bool
    AutoCollectDrop = bool
end) 

game:GetService('RunService').Stepped:connect(function()
    spawn(function()
        pcall(function()
            if AutoCollectDrop == true then 
                for i,v in pairs(game:GetService("Workspace")["__THINGS"].Orbs:GetChildren()) do
                    v.CanCollide = false
                    v.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame + Vector3.new(0,0,0)
                end
            end
        end)
    end)
end) 

Tab4:Button("Anti Afk", function()
local GC = getconnections or get_signal_cons
if GC then
    for i,v in pairs(GC(game.Players.LocalPlayer.Idled)) do
        if v["Disable"] then
            v["Disable"](v)
        elseif v["Disconnect"] then
            v["Disconnect"](v)
        end
    end
else
    print("Bad luck maybe next time not")
    local vu = game:GetService("VirtualUser")
    game:GetService("Players").LocalPlayer.Idled:connect(function()
        vu:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
        wait(1)
        vu:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
    end)
end
end) 

Tab4:Button("Stat Tracker", function()
loadstring(game:HttpGet('https://pastebin.com/raw/dPXXyp4A'))()
end)

Tab4:Button("Gamepass", function()
local gmppath = require(game:GetService("ReplicatedStorage").Framework.Modules.Client["5 | Gamepasses"])
gmppath.Owns = function() return true end
local tbl = require(game.ReplicatedStorage.Framework.Modules.Client["4 | Save"]).Get()
tbl.Hoverboards = {}
for i,v in pairs(game.ReplicatedStorage.Game.Hoverboards:GetChildren())do
table.insert(tbl.Hoverboards, v.Name)
end
getsenv(game.Players.LocalPlayer.PlayerScripts.Scripts.GUIs.Hoverboards).Update()
getsenv(game.Players.LocalPlayer.PlayerScripts.Scripts.GUIs.Hoverboards).Equip = function(board)
tbl.EquippedHoverboard = board
getsenv(game.Players.LocalPlayer.PlayerScripts.Scripts.GUIs.Hoverboards).Update()
end
end)

Tab4:Label("|| Redeem ||")

Tab4:Button("Redeem Ranks", function()
	workspace.__THINGS.__REMOTES["redeem rank rewards"]:InvokeServer({})			
end) 

Tab4:Button("Redeem VIP Ranks", function()
	workspace.__THINGS.__REMOTES["redeem vip rewards"]:InvokeServer({})
end) 

Tab5:Button("Pet Collection", function()
game:GetService("Players").LocalPlayer.PlayerGui.Collection.Enabled = not game:GetService("Players").LocalPlayer.PlayerGui.Collection.Enabled
end) 

Tab5:Button("Fuse Machine", function()
game:GetService("Players").LocalPlayer.PlayerGui.FusePets.Enabled = not game:GetService("Players").LocalPlayer.PlayerGui.FusePets.Enabled
end) 

Tab5:Button("Golden Machine", function()
game:GetService("Players").LocalPlayer.PlayerGui.Golden.Enabled = not game:GetService("Players").LocalPlayer.PlayerGui.Golden.Enabled
end) 

Tab5:Button("Rainbow Machine", function()
game:GetService("Players").LocalPlayer.PlayerGui.Rainbow.Enabled = not game:GetService("Players").LocalPlayer.PlayerGui.Rainbow.Enabled
end) 

Tab5:Button("Dark Matter Machine", function()
game:GetService("Players").LocalPlayer.PlayerGui.DarkMatter.Enabled = not game:GetService("Players").LocalPlayer.PlayerGui.DarkMatter.Enabled
end) 

Tab5:Button("Merchant", function()
game:GetService("Players").LocalPlayer.PlayerGui.Merchant.Enabled = not game:GetService("Players").LocalPlayer.PlayerGui.Merchant.Enabled
end) 

Tab5:Button("Enchant", function()
game:GetService("Players").LocalPlayer.PlayerGui.EnchantPets.Enabled = not game:GetService("Players").LocalPlayer.PlayerGui.EnchantPets.Enabled
end)

Tab6:Label("Creator = mech#0945")
Tab6:Label("Library = idk?")
Tab6:Label("linktr.ee/brine777")
